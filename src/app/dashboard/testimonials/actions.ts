"use server";

import { TestimonialRepositoryDrizzle } from "@/infrastructure/repositories/TestimonialRepositoryDrizzle";
import { Testimonial } from "@/domain/entities/Testimonial";
import { revalidatePath } from "next/cache";

const testimonialRepository = new TestimonialRepositoryDrizzle();

export async function getTestimonials() {
  const testimonials = await testimonialRepository.findAll();
  return testimonials.map((testimonial) => ({
    id: testimonial.id,
    userId: testimonial.userId,
    clientName: testimonial.clientName,
    companyName: testimonial.companyName,
    content: testimonial.content,
    rating: testimonial.rating,
    status: testimonial.status,
    createdAt: testimonial.createdAt,
    updatedAt: testimonial.updatedAt,
  }));
}

export async function addTestimonial(testimonialData: {
  userId: string;
  clientName: string;
  companyName: string;
  content: string;
  rating: number;
  status: string;
}) {
  const testimonial = new Testimonial(
    "", // ID will be generated by the database
    testimonialData.userId,
    testimonialData.clientName,
    testimonialData.companyName,
    testimonialData.content,
    testimonialData.rating,
    testimonialData.status,
    new Date(), // createdAt
    new Date() // updatedAt
  );
  await testimonialRepository.add(testimonial);
  revalidatePath("/dashboard/testimonials");
}

export async function editTestimonial(testimonialData: Partial<Testimonial> & { id: string }) {
  const { id, ...data } = testimonialData;
  await testimonialRepository.update(id, data);
  console.log("Revalidating path /dashboard/testimonials");
  revalidatePath("/dashboard/testimonials");
}

export async function deleteTestimonial(id: string) {
  await testimonialRepository.delete(id);
  revalidatePath("/dashboard/testimonials");
}