"use server";

import { ReferralRepositoryDrizzle } from "@/infrastructure/repositories/ReferralRepositoryDrizzle";
import { AddReferralUseCase } from "@/application/use-cases/AddReferralUseCase";
import { EditReferralUseCase } from "@/application/use-cases/EditReferralUseCase";
import { DeleteReferralUseCase } from "@/application/use-cases/DeleteReferralUseCase";
import { ListReferralsUseCase } from "@/application/use-cases/ListReferralsUseCase";
import { Referral } from "@/domain/entities/Referral";
import { Email } from "@/domain/value-objects/Email";
import { ReferralStatus } from "@/domain/value-objects/ReferralStatus";
import { revalidatePath } from "next/cache";

const referralRepository = new ReferralRepositoryDrizzle();
const addReferralUseCase = new AddReferralUseCase(referralRepository);
const editReferralUseCase = new EditReferralUseCase(referralRepository);
const deleteReferralUseCase = new DeleteReferralUseCase(referralRepository);
const listReferralsUseCase = new ListReferralsUseCase(referralRepository);

export async function getReferrals() {
  const referrals = await listReferralsUseCase.execute();
  return referrals.map((referral) => ({
    id: referral.id,
    name: referral.name,
    email: referral.email.toString(),
    date: referral.date,
    status: referral.status,
    referrer: {
      id: referral?.referrer?.id,
      name: referral?.referrer?.name,
      email: referral?.referrer?.email,
    },
  }));
}

export async function addReferral(formData: FormData) {
  const name = formData.get("name") as string;
  const email = formData.get("email") as string;
  const referrerId = formData.get("referrerId") as string;

  const referral = new Referral(
    "", // ID will be generated by the database
    name,
    new Email(email),
    new Date(),
    ReferralStatus.Pending,
    referrerId ? { id: referrerId, name: "", email: new Email("") } : undefined // Simplified for now
  );

  await addReferralUseCase.execute(referral);
  revalidatePath("/dashboard/referrals");
}

export async function editReferral(referralData: Partial<Referral> & { id: string }) {
  const { id, ...data } = referralData;
  await editReferralUseCase.execute(id, data);
  revalidatePath("/dashboard/referrals");
}

export async function deleteReferral(id: string) {
  await deleteReferralUseCase.execute(id);
  revalidatePath("/dashboard/referrals");
}
